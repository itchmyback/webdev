-- MORE JOINS
-- from Kristian
-- SELECT e.first_name, e.last_name, l.city, d.department_name
-- FROM employees e
--     JOIN departments d ON e.department_id = d.department_id
--     JOIN locations l ON d.location_id = l.location_id;

-- SELECT department_name
-- FROM departments
-- JOIN locations
-- ON departments.location_id = locations.location_id

-- go back a step here
SELECT department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
WHERE city = 'Seattle';

-- use double JOIN to link employees to departments to locations
SELECT department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
JOIN employees
ON employees.department_id = departments.department_id
WHERE city = 'Seattle';

SELECT last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
JOIN employees
ON employees.department_id = departments.department_id
WHERE city = 'Seattle';

-- order of JOIN ON doesn't matter
SELECT last_name, department_name, city
FROM departments
JOIN employees
ON employees.department_id = departments.department_id
JOIN locations
ON departments.location_id = locations.location_id
WHERE city = 'Seattle';

-- also, by convention, maybe put the FROM database first?
SELECT last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
JOIN employees
ON departments.department_id = employees.department_id
WHERE city = 'Seattle';

-- RIGHT JOIN
SELECT first_name || ' ' || last_name, department_id
FROM employees;

-- the RIGHT refers to the employees database
SELECT first_name || ' ' || last_name, department_name
FROM departments
RIGHT JOIN employees
ON departments.department_id = employees.department_id;

SELECT first_name || ' ' || last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
RIGHT JOIN employees
ON departments.department_id = employees.department_id
WHERE city = 'Seattle';

-- LEFT JOIN
SELECT first_name || ' ' || last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
LEFT JOIN employees
ON departments.department_id = employees.department_id
WHERE city = 'Seattle';
-- there is an extra entry because from departments table,
-- there is a department_name = Contracting which will show up

-- FULL JOIN - same results as LEFT JOIN
SELECT first_name || ' ' || last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
FULL JOIN employees
ON departments.department_id = employees.department_id
WHERE city = 'Seattle';

-- exercise - provide sales data from products and sales in the following format
SELECT TO_CHAR(saledate, 'DD/MM/YYYY') AS "SALE DATE", description AS "PRODUCT NAME", amount AS "SALE AMOUNT"
FROM products AS p
JOIN sales AS s
ON p.productid = s.productid;

-- old school way
SELECT TO_CHAR(saledate, 'DD/MM/YYYY') AS "SALE DATE", description AS "PRODUCT NAME", amount AS "SALE AMOUNT"
-- multiple FROM
FROM products AS p, sales AS s
WHERE p.productid = s.productid;

-- one way to think of JOIN is to make a temporary table of multiple tables, using a common column to align

-- exercise - player data
SELECT fname, lname, height, weight, team_id
FROM players;

-- exercise - player data drafted
SELECT fname, lname, height, weight, team_id
FROM players
WHERE team_id IS NOT NULL;

-- some exercise
SELECT employee_id, first_name, last_name, email, job_id, manager_id, department_id
FROM employees
LIMIT 10;

-- then try to do something
SELECT emp.first_name || ' ' || emp.last_name,
       mgr.first_name || ' ' || mgr.last_name
FROM employees AS emp
-- JOIN employees AS mgr
LEFT JOIN employees AS mgr
ON emp.manager_id = mgr.employee_id;

-- exercise
SELECT first_name || ' ' || last_name, department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id
FULL JOIN employees
ON departments.department_id = employees.department_id
ORDER BY last_name;

-- departments to locations
SELECT department_name, city
FROM departments
JOIN locations
ON departments.location_id = locations.location_id;

-- departments to employees
SELECT first_name || ' ' || last_name, department_name
FROM departments
JOIN employees
ON departments.department_id = employees.department_id;

SELECT e.first_name || ' ' || e.last_name AS "Full Name", l.city, d.department_id
FROM departments d
JOIN locations l
ON d.location_id = l.location_id
-- JOIN employees e
-- why right join?
-- null values won't show up, employees or departments
-- RIGHT JOIN employees e
-- but right join still not enough
FULL JOIN employees e
ON e.department_id = d.department_id
ORDER BY e.last_name;
